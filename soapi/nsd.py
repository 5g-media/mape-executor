import json
import logging.config
from settings import OSM_COMPONENTS, LOGGING
from httpclient.client import Client

logging.config.dictConfig(LOGGING)
logger = logging.getLogger(__name__)


class Nsd(object):
    """Description of Nsd class"""

    def __init__(self, token):
        """Constructor of Nsr class"""
        self.__client = Client(verify_ssl_cert=False)
        self.basic_token = token

    def get_list(self):
        """Get the list of the NS descriptors from the SO-ub container

        Returns:
            obj: a requests object

        Examples:
            >>> from soapi.nsd import Nsd
            >>> from soapi.identity import basic_token
            >>> from settings import OSM_ADMIN_CREDENTIALS
            >>> token = basic_token(OSM_ADMIN_CREDENTIALS.get('username'), OSM_ADMIN_CREDENTIALS.get('username'))
            >>> nsd = Nsd(token)
            >>> nsd_records = nsd.get_list()
            >>> print(int(nsd_records.status_code))
            200
        """
        endpoint = '{}/api/running/project/default/nsd-catalog/nsd'.format(OSM_COMPONENTS.get('SO-API'))
        headers = {"Authorization": "Basic {}".format(self.basic_token), "Accept": "application/json"}
        response = self.__client.get(endpoint, headers)
        return response

    def search(self, nsd_name):
        """Get the NS descriptor from the SO-ub container

        Args:
            nsd_name (str): The name of the network service's descriptor

        Returns:
            obj: a requests object

        Examples:
            >>> from soapi.nsd import Nsd
            >>> from soapi.identity import basic_token
            >>> from settings import OSM_ADMIN_CREDENTIALS
            >>> token = basic_token(OSM_ADMIN_CREDENTIALS.get('username'), OSM_ADMIN_CREDENTIALS.get('username'))
            >>> nsd = Nsd(token)
            >>> nsd_record = nsd.search('cirros_2vnf_ns')
            >>> print(nsd_record)

        Descriptor sample:
        --
        {
            "name": "cirros_2vnf_ns",
            "constituent-vnfd": [
                {
                    "member-vnf-index": 1,
                    "vnfd-id-ref": "cirros_vnfd",
                    "start-by-default": "true"
                },
                {
                    "member-vnf-index": 2,
                    "vnfd-id-ref": "cirros_vnfd",
                    "start-by-default": "true"
                }
            ],
            "description": "Generated by OSM pacakage generator",
            "short-name": "cirros_2vnf_ns",
            "id": "cirros_2vnf_nsd",
            "version": "1.0",
            "vld": [
                {
                    "name": "cirros_2vnf_nsd_vld1",
                    "vnfd-connection-point-ref": [
                        {
                            "vnfd-connection-point-ref": "eth0",
                            "vnfd-id-ref": "cirros_vnfd",
                            "member-vnf-index-ref": 1
                        },
                        {
                            "vnfd-connection-point-ref": "eth0",
                            "vnfd-id-ref": "cirros_vnfd",
                            "member-vnf-index-ref": 2
                        }
                    ],
                    "short-name": "cirros_2vnf_nsd_vld1",
                    "mgmt-network": "true",
                    "id": "cirros_2vnf_nsd_vld1",
                    "type": "ELAN"
                }
            ],
            "logo": "osm_2x.png",
            "vendor": "OSM"
        }
        """
        descriptor = {}
        try:
            # Get the list of NSDs
            nsd_response = self.get_list()
            nsd_records = nsd_response.json()
            actual_records =  nsd_records.get('project-nsd:nsd', [])
            # Search for the NSD by given NSD name
            for record in actual_records:
                record_name = record.get("name", None)
                if record_name is not None and record_name == nsd_name:
                    descriptor = record
                    break
        except Exception as e:
            logger.exception(e)
        finally:
            return descriptor

